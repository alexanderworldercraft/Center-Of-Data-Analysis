import { UniversalFn, UniversalHandler, UniversalMiddleware, Get } from '@universal-middleware/core';
import { RouteHandlerMethod, FastifyPluginAsync, FastifyRequest } from 'fastify';

declare const contextSymbol: unique symbol;
declare const pendingMiddlewaresSymbol: unique symbol;
declare const wrappedResponseSymbol: unique symbol;
type FastifyHandler<In extends Universal.Context> = UniversalFn<UniversalHandler<In>, RouteHandlerMethod>;
type FastifyMiddleware<In extends Universal.Context, Out extends Universal.Context> = UniversalFn<UniversalMiddleware<In, Out>, FastifyPluginAsync>;
declare module "fastify" {
    interface FastifyRequest {
        [pendingMiddlewaresSymbol]?: ((response: Response) => Response | Promise<Response> | undefined | Promise<undefined>)[];
        [wrappedResponseSymbol]?: boolean;
    }
    interface FastifyContextConfig {
        [contextSymbol]: unknown;
    }
}
declare function createHandler<T extends unknown[], InContext extends Universal.Context>(handlerFactory: Get<T, UniversalHandler<InContext>>): Get<T, FastifyHandler<InContext>>;
declare function createMiddleware<T extends unknown[], InContext extends Universal.Context, OutContext extends Universal.Context>(middlewareFactory: Get<T, UniversalMiddleware<InContext, OutContext>>): Get<T, FastifyMiddleware<InContext, OutContext>>;
declare function getContext<InContext extends Universal.Context = Universal.Context>(req: FastifyRequest): InContext;

export { type FastifyHandler, type FastifyMiddleware, createHandler, createMiddleware, getContext };
