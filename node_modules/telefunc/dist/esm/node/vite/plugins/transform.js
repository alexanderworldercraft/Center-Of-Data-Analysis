export { transform };
import { transformTelefuncFileClientSide } from '../../transformer/transformTelefuncFileClientSide';
import { transformTelefuncFileServerSide } from '../../transformer/transformTelefuncFileServerSide';
import { assert, toPosixPath } from '../utils';
function transform() {
    let root;
    let isDev = false;
    return {
        name: 'telefunc:transform',
        enforce: 'pre',
        configResolved: (config) => {
            root = toPosixPath(config.root);
            assert(root);
        },
        configureServer() {
            isDev = true;
        },
        async transform(code, id, options) {
            if (!id.includes('.telefunc.')) {
                return;
            }
            const isClientSide = !(options === null || options === void 0 ? void 0 : options.ssr);
            if (isClientSide) {
                code = await transformTelefuncFileClientSide(code, id, root);
            }
            else {
                code = await transformTelefuncFileServerSide(code, id, root, true, isDev);
            }
            if (isClientSide) {
                return {
                    code,
                    // Pass through source map https://rollupjs.org/plugin-development/#source-code-transformations
                    map: null,
                };
            }
            else {
                return code;
            }
        },
    };
}
