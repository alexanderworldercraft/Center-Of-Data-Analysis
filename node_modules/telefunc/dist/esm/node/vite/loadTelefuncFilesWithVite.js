export { loadTelefuncFilesWithVite };
import { importServerProductionEntry } from '@brillout/vite-plugin-server-entry/runtime';
import { assert, assertWarning, getNodeEnv, hasProp, isObject, isProduction, isTelefuncFilePath } from '../utils';
import { telefuncFilesGlobFilePath } from './importGlob/telefuncFilesGlobPath';
import { loadTelefuncFilesWithImportBuild } from './plugins/importBuild/loadBuild';
import { getViteDevServer } from '../server/globalContext';
async function loadTelefuncFilesWithVite(runContext, failOnFailure) {
    const res = await loadGlobImporter(failOnFailure);
    if (!res)
        return null;
    const { moduleExports, viteProvider } = res;
    assert(isObject(moduleExports), { moduleExports, viteProvider });
    assert(hasProp(moduleExports, 'telefuncFilesGlob'), { moduleExports, viteProvider });
    const telefuncFilesGlob = moduleExports.telefuncFilesGlob;
    const { telefuncFilesLoaded, telefuncFilesAll } = await loadGlobFiles(telefuncFilesGlob, runContext);
    assert(isObjectOfObjects(telefuncFilesLoaded));
    return { telefuncFilesLoaded, viteProvider, telefuncFilesAll };
}
async function loadGlobImporter(failOnFailure) {
    const viteDevServer = getViteDevServer();
    if (viteDevServer) {
        const devPath = telefuncFilesGlobFilePath;
        let moduleExports;
        try {
            moduleExports = await viteDevServer.ssrLoadModule(devPath);
        }
        catch (err) {
            viteDevServer.ssrFixStacktrace(err);
            throw err;
        }
        return { moduleExports, viteProvider: 'Vite' };
    }
    else {
        let moduleExports;
        moduleExports = await loadTelefuncFilesWithImportBuild();
        if (moduleExports === null) {
            const tolerateNotFound = !failOnFailure;
            const success = await importServerProductionEntry({ tolerateNotFound });
            moduleExports = await loadTelefuncFilesWithImportBuild();
            if (success === false) {
                assert(tolerateNotFound);
                assert(!moduleExports);
                return null;
            }
            assert(moduleExports);
        }
        else {
            assert(moduleExports);
        }
        assertProd();
        return { moduleExports, viteProvider: '@brillout/vite-plugin-server-entry' };
    }
}
function assertProd() {
    if (!isProduction()) {
        const env = getNodeEnv();
        assert(env === undefined || env === 'development' || env === '');
        assertWarning(false, `This seems to be a production environment yet process.env.NODE_ENV is ${JSON.stringify(env)}. Set it to a different value such as "production" or "staging".`, { onlyOnce: true });
    }
}
function isObjectOfObjects(obj) {
    return isObject(obj) && Object.values(obj).every(isObject);
}
async function loadGlobFiles(telefuncFilesGlob, runContext) {
    const telefuncFilesAll = Object.keys(telefuncFilesGlob);
    const telefuncFilesLoaded = Object.fromEntries(await Promise.all(Object.entries(telefuncFilesGlob)
        .filter(([telefuncFilePath]) => {
        assert(isTelefuncFilePath(telefuncFilePath));
        assert(isTelefuncFilePath(runContext.telefuncFilePath));
        return telefuncFilePath === runContext.telefuncFilePath;
    })
        .map(async ([telefuncFilePath, loadModuleExports]) => [telefuncFilePath, await loadModuleExports()])));
    assert(Object.keys(telefuncFilesLoaded).length <= 1);
    return { telefuncFilesAll, telefuncFilesLoaded };
}
