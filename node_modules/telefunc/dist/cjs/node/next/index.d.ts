export default telefuncPlugin;
import type { NextConfig } from 'next';
declare function telefuncPlugin(nextConfig?: NextConfig): {
    [key: string]: any;
} & {
    i18n?: import("next/dist/server/config-shared").I18NConfig | null;
    eslint?: import("next/dist/server/config-shared").ESLintConfig;
    typescript?: import("next/dist/server/config-shared").TypeScriptConfig;
    headers?: () => Promise<import("next/dist/lib/load-custom-routes").Header[]>;
    rewrites?: () => Promise<import("next/dist/lib/load-custom-routes").Rewrite[] | {
        beforeFiles: import("next/dist/lib/load-custom-routes").Rewrite[];
        afterFiles: import("next/dist/lib/load-custom-routes").Rewrite[];
        fallback: import("next/dist/lib/load-custom-routes").Rewrite[];
    }>;
    redirects?: () => Promise<import("next/dist/lib/load-custom-routes").Redirect[]>;
    webpack5?: false;
    excludeDefaultMomentLocales?: boolean;
    webpack?: ((config: any, context: {
        dir: string;
        dev: boolean;
        isServer: boolean;
        buildId: string;
        config: import("next/dist/server/config-shared").NextConfigComplete;
        defaultLoaders: {
            babel: any;
        };
        totalPages: number;
        webpack: any;
    }) => any) | null;
    trailingSlash?: boolean;
    env?: {
        [key: string]: string;
    };
    distDir?: string;
    cleanDistDir?: boolean;
    assetPrefix?: string;
    useFileSystemPublicRoutes?: boolean;
    generateBuildId?: () => string | null | Promise<string | null>;
    generateEtags?: boolean;
    pageExtensions?: string[];
    compress?: boolean;
    poweredByHeader?: boolean;
    images?: import("next/dist/server/image-config").ImageConfig;
    devIndicators?: {
        buildActivity?: boolean;
        buildActivityPosition?: "bottom-right" | "bottom-left" | "top-right" | "top-left";
    };
    onDemandEntries?: {
        maxInactiveAge?: number;
        pagesBufferLength?: number;
    };
    amp?: {
        canonicalBase?: string;
    };
    basePath?: string;
    sassOptions?: {
        [key: string]: any;
    };
    productionBrowserSourceMaps?: boolean;
    optimizeFonts?: boolean;
    reactStrictMode?: boolean;
    publicRuntimeConfig?: {
        [key: string]: any;
    };
    serverRuntimeConfig?: {
        [key: string]: any;
    };
    httpAgentOptions?: {
        keepAlive?: boolean;
    };
    future?: {
        webpack5?: false;
    };
    outputFileTracing?: boolean;
    staticPageGenerationTimeout?: number;
    crossOrigin?: false | "anonymous" | "use-credentials";
    swcMinify?: boolean;
    experimental?: {
        disablePostcssPresetEnv?: boolean;
        removeConsole?: boolean | {
            exclude?: string[];
        };
        reactRemoveProperties?: boolean | {
            properties?: string[];
        };
        styledComponents?: boolean;
        swcMinify?: boolean;
        swcFileReading?: boolean;
        cpus?: number;
        sharedPool?: boolean;
        plugins?: boolean;
        profiling?: boolean;
        isrFlushToDisk?: boolean;
        reactMode?: "legacy" | "concurrent" | "blocking";
        workerThreads?: boolean;
        pageEnv?: boolean;
        optimizeImages?: boolean;
        optimizeCss?: boolean;
        scrollRestoration?: boolean;
        externalDir?: boolean;
        conformance?: boolean;
        amp?: {
            optimizer?: any;
            validator?: string;
            skipValidation?: boolean;
        };
        reactRoot?: boolean;
        disableOptimizedLoading?: boolean;
        gzipSize?: boolean;
        craCompat?: boolean;
        esmExternals?: boolean | "loose";
        isrMemoryCacheSize?: number;
        concurrentFeatures?: boolean;
        serverComponents?: boolean;
        fullySpecified?: boolean;
        urlImports?: NonNullable<import("next/dist/compiled/webpack/webpack").webpack5.Configuration["experiments"]>["buildHttp"];
        outputFileTracingRoot?: string;
        outputStandalone?: boolean;
    };
};
