"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadTelefuncFilesWithVite = loadTelefuncFilesWithVite;
const runtime_1 = require("@brillout/vite-plugin-server-entry/runtime");
const utils_1 = require("../utils");
const telefuncFilesGlobPath_1 = require("./importGlob/telefuncFilesGlobPath");
const loadBuild_1 = require("./plugins/importBuild/loadBuild");
const globalContext_1 = require("../server/globalContext");
async function loadTelefuncFilesWithVite(runContext, failOnFailure) {
    const res = await loadGlobImporter(failOnFailure);
    if (!res)
        return null;
    const { moduleExports, viteProvider } = res;
    (0, utils_1.assert)((0, utils_1.isObject)(moduleExports), { moduleExports, viteProvider });
    (0, utils_1.assert)((0, utils_1.hasProp)(moduleExports, 'telefuncFilesGlob'), { moduleExports, viteProvider });
    const telefuncFilesGlob = moduleExports.telefuncFilesGlob;
    const { telefuncFilesLoaded, telefuncFilesAll } = await loadGlobFiles(telefuncFilesGlob, runContext);
    (0, utils_1.assert)(isObjectOfObjects(telefuncFilesLoaded));
    return { telefuncFilesLoaded, viteProvider, telefuncFilesAll };
}
async function loadGlobImporter(failOnFailure) {
    const viteDevServer = (0, globalContext_1.getViteDevServer)();
    if (viteDevServer) {
        const devPath = telefuncFilesGlobPath_1.telefuncFilesGlobFilePath;
        let moduleExports;
        try {
            moduleExports = await viteDevServer.ssrLoadModule(devPath);
        }
        catch (err) {
            viteDevServer.ssrFixStacktrace(err);
            throw err;
        }
        return { moduleExports, viteProvider: 'Vite' };
    }
    else {
        let moduleExports;
        moduleExports = await (0, loadBuild_1.loadTelefuncFilesWithImportBuild)();
        if (moduleExports === null) {
            const tolerateNotFound = !failOnFailure;
            const success = await (0, runtime_1.importServerProductionEntry)({ tolerateNotFound });
            moduleExports = await (0, loadBuild_1.loadTelefuncFilesWithImportBuild)();
            if (success === false) {
                (0, utils_1.assert)(tolerateNotFound);
                (0, utils_1.assert)(!moduleExports);
                return null;
            }
            (0, utils_1.assert)(moduleExports);
        }
        else {
            (0, utils_1.assert)(moduleExports);
        }
        assertProd();
        return { moduleExports, viteProvider: '@brillout/vite-plugin-server-entry' };
    }
}
function assertProd() {
    if (!(0, utils_1.isProduction)()) {
        const env = (0, utils_1.getNodeEnv)();
        (0, utils_1.assert)(env === undefined || env === 'development' || env === '');
        (0, utils_1.assertWarning)(false, `This seems to be a production environment yet process.env.NODE_ENV is ${JSON.stringify(env)}. Set it to a different value such as "production" or "staging".`, { onlyOnce: true });
    }
}
function isObjectOfObjects(obj) {
    return (0, utils_1.isObject)(obj) && Object.values(obj).every(utils_1.isObject);
}
async function loadGlobFiles(telefuncFilesGlob, runContext) {
    const telefuncFilesAll = Object.keys(telefuncFilesGlob);
    const telefuncFilesLoaded = Object.fromEntries(await Promise.all(Object.entries(telefuncFilesGlob)
        .filter(([telefuncFilePath]) => {
        (0, utils_1.assert)((0, utils_1.isTelefuncFilePath)(telefuncFilePath));
        (0, utils_1.assert)((0, utils_1.isTelefuncFilePath)(runContext.telefuncFilePath));
        return telefuncFilePath === runContext.telefuncFilePath;
    })
        .map(async ([telefuncFilePath, loadModuleExports]) => [telefuncFilePath, await loadModuleExports()])));
    (0, utils_1.assert)(Object.keys(telefuncFilesLoaded).length <= 1);
    return { telefuncFilesAll, telefuncFilesLoaded };
}
