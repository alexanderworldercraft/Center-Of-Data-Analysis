"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getContext_sync = getContext_sync;
exports.provideTelefuncContext_sync = provideTelefuncContext_sync;
exports.restoreContext_sync = restoreContext_sync;
const utils_1 = require("../../utils");
const globalObject = (0, utils_1.getGlobalObject)('getContext/sync.ts', {
    context: null,
    hasRestoreAccess: false,
    neverProvided: true,
    neverRestored: true,
});
function getContext_sync() {
    if (globalObject.context === null) {
        // Using `neverRestored` to detect SSR doesn't always work.
        //  - Reliable alternative: use an Async Hook in dev to detect SSR.
        if (globalObject.neverRestored) {
            (0, utils_1.assertUsage)(false, 'Using Telefunc to fetch the initial data of your page is discouraged, see https://telefunc.com/initial-data');
        }
        if (globalObject.hasRestoreAccess || globalObject.neverProvided) {
            (0, utils_1.assertUsage)(false, '[getContext()] Make sure to provide a context object, see https://telefunc.com/getContext#provide');
        }
        else {
            (0, utils_1.assertUsage)(false, '[getContext()] Cannot access context object, see https://telefunc.com/getContext#access');
        }
    }
    (0, utils_1.assert)((0, utils_1.isObject)(globalObject.context));
    return globalObject.context;
}
function restoreContext_sync(context) {
    globalObject.neverRestored = false;
    provide(context);
}
function provideTelefuncContext_sync(context) {
    (0, utils_1.assertUsage)((0, utils_1.isObject)(context), '[provideTelefuncContext(context)] Argument `context` should be an object');
    provide(context);
}
function provide(context) {
    (0, utils_1.assert)(context === null || (0, utils_1.isObject)(context));
    if (context) {
        globalObject.neverProvided = false;
        globalObject.context = context;
    }
    globalObject.hasRestoreAccess = true;
    // We don't use process.nextTick() to avoid dependency on Node.js
    setTimeout(() => {
        globalObject.context = null;
        globalObject.hasRestoreAccess = false;
    }, 0);
}
