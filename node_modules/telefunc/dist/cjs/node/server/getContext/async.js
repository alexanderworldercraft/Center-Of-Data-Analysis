"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getContext_async = getContext_async;
exports.provideTelefuncContext_async = provideTelefuncContext_async;
const node_async_hooks_1 = require("node:async_hooks");
const utils_1 = require("../../utils");
const getContext_1 = require("../getContext");
(0, getContext_1.installAsyncMode)({ getContext_async, provideTelefuncContext_async, restoreContext_async });
const globalObject = (0, utils_1.getGlobalObject)('getContext/async.ts', {});
function getContext_async() {
    const errMsg = '[getContext()] Make sure to call provideTelefuncContext() before calling getContext()';
    (0, utils_1.assertUsage)(globalObject.asyncStore, errMsg);
    const context = globalObject.asyncStore.getStore();
    (0, utils_1.assert)(context === undefined || (0, utils_1.isObject)(context));
    (0, utils_1.assertUsage)(context, errMsg);
    return context;
}
function provideTelefuncContext_async(context) {
    var _a;
    (0, utils_1.assertUsage)((0, utils_1.isObject)(context), '[provideTelefuncContext(context)] Argument `context` should be an object');
    globalObject.asyncStore = (_a = globalObject.asyncStore) !== null && _a !== void 0 ? _a : new node_async_hooks_1.AsyncLocalStorage();
    globalObject.asyncStore.enterWith(context);
}
function restoreContext_async(context) {
    (0, utils_1.assert)(context === null || (0, utils_1.isObject)(context));
    (0, utils_1.assertWarning)(!context, 'When using `provideTelefuncContext()` (i.e. Async Hooks), then providing the `context` object to the server middleware `telefunc()` has no efect.', { onlyOnce: true });
}
