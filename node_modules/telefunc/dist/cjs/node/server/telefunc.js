"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.telefunc = telefunc;
const runTelefunc_1 = require("./runTelefunc");
const utils_1 = require("../utils");
/** Get HTTP Response for a telefunction remote call HTTP Request.
 * @returns HTTP Response
 */
async function telefunc(httpRequest) {
    assertHttpRequest(httpRequest, arguments.length);
    const httpResponse = await (0, runTelefunc_1.runTelefunc)(httpRequest);
    return httpResponse;
}
function assertHttpRequest(httpRequest, numberOfArguments) {
    (0, utils_1.assertUsage)(numberOfArguments === 1, '`telefunc()`: all arguments should be passed as a single argument object.');
    (0, utils_1.assertUsage)(httpRequest, '`telefunc(httpRequest)`: argument `httpRequest` is missing.');
    (0, utils_1.assertUsage)((0, utils_1.isObject)(httpRequest), '`telefunc(httpRequest)`: argument `httpRequest` should be an object.');
    (0, utils_1.assertUsage)((0, utils_1.hasProp)(httpRequest, 'url'), '`telefunc({ url })`: argument `url` is missing.');
    (0, utils_1.assertUsage)((0, utils_1.hasProp)(httpRequest, 'url', 'string'), '`telefunc({ url })`: argument `url` should be a string.');
    (0, utils_1.assertUsage)((0, utils_1.hasProp)(httpRequest, 'method'), '`telefunc({ method })`: argument `method` is missing.');
    (0, utils_1.assertUsage)((0, utils_1.hasProp)(httpRequest, 'method', 'string'), '`telefunc({ method })`: argument `method` should be a string.');
    (0, utils_1.assertUsage)((0, utils_1.hasProp)(httpRequest, 'body'), '`telefunc({ body })`: argument `body` is missing.');
    (0, utils_1.assertUsage)(!('context' in httpRequest) || (0, utils_1.hasProp)(httpRequest, 'context', 'object'), '`telefunc({ context })`: argument `context` should be an object.');
    Object.keys(httpRequest).forEach((key) => {
        (0, utils_1.assertUsage)(['url', 'method', 'body', 'context'].includes(key), '`telefunc({ ' + key + ' })`: Unknown argument `' + key + '`.');
    });
    // We further assert the `httpRequest` in `./runTelefunc/parseHttpRequest.ts`
}
