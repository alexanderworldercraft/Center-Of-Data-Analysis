"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Abort = Abort;
exports.isAbort = isAbort;
const utils_1 = require("../utils");
const stamp = '__telefunc_isAbort';
function isAbort(thing) {
    (0, utils_1.assert)(thing !== Abort); // Catched earlier in `executeTelefunction()`
    return typeof thing === 'object' && thing !== null && stamp in thing;
}
function Abort(abortValue) {
    {
        // @ts-ignore
        const that = this;
        (0, utils_1.assertUsage)(!(typeof that === 'object' && (that === null || that === void 0 ? void 0 : that.constructor) === Abort), 'Do not use the `new` operator: use `throw Abort()` instead of `throw new Abort()`.');
    }
    (0, utils_1.assertUsage)(arguments.length <= 1, 'Abort() accepts only a single argument: use `throw Abort([arg1, arg2])` instead of `throw Abort(arg1, arg2).`');
    const abortError = new Error('Abort');
    (0, utils_1.objectAssign)(abortError, {
        isAbort: true,
        abortValue,
        [stamp]: true,
    });
    return abortError;
}
