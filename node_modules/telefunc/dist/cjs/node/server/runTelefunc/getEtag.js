"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEtag = getEtag;
const utils_1 = require("../../utils");
async function getEtag(runContext) {
    if (runContext.disableEtag) {
        return null;
    }
    let createHash;
    try {
        createHash = (await Promise.resolve().then(() => __importStar(require('node:crypto')))).createHash;
    }
    catch (err) {
        /*
        assertWarning(
          false,
          'The HTTP response ETag header missing because the Node.js module `crypto` could not be loaded. Set `config.disableEtag = true` to remove this warning.',
          { onlyOnce: true }
        )
        */
        return null;
    }
    const etag = computeEtag(runContext.httpResponseBody, createHash);
    return etag;
}
function computeEtag(body, createHash) {
    const etagValue = computeEtagValue(body, createHash);
    (0, utils_1.assert)(!etagValue.includes('"'));
    const etag = `"${etagValue}"`;
    return etag;
}
function computeEtagValue(body, createHash) {
    if (body.length === 0) {
        // fast-path empty body
        return '1B2M2Y8AsgTpgAmY7PhCfg==';
    }
    return createHash('md5').update(body, 'utf8').digest('base64');
}
