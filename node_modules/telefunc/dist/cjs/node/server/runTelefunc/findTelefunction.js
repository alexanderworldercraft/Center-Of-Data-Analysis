"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findTelefunction = findTelefunction;
const utils_1 = require("../../utils");
const assertNamingConvention_1 = require("./assertNamingConvention");
const assertTelefunction_1 = require("./assertTelefunction");
const serverConfig_1 = require("../serverConfig");
const picocolors_1 = __importDefault(require("@brillout/picocolors"));
function findTelefunction(runContext) {
    (0, utils_1.assertUsage)(runContext.telefuncFilesAll.length > 0, [
        `Telefunction ${runContext.telefunctionName}() (${runContext.telefuncFilePath}) not found.`,
        "Your app doesn't seem to have any `.telefunc.{js|ts|...}` file.",
    ].join(' '));
    const telefuncFile = findTelefuncFile(runContext);
    const telefunction = (() => {
        if (!telefuncFile) {
            return null;
        }
        if (!(runContext.telefunctionName in telefuncFile.fileExports)) {
            return null;
        }
        const telefunction = telefuncFile.fileExports[runContext.telefunctionName];
        (0, assertTelefunction_1.assertTelefunction)(telefunction, runContext.telefunctionName, telefuncFile.filePath);
        if (!runContext.serverConfig.disableNamingConvention) {
            (0, assertNamingConvention_1.assertNamingConvention)(telefunction, runContext.telefunctionName, telefuncFile.filePath, runContext.appRootDir);
        }
        return telefunction;
    })();
    if (!telefunction) {
        if (runContext.logInvalidRequests) {
            const errMsg = getNotFoundErrMsg();
            console.error(`${utils_1.errorPrefix} ${errMsg}`);
        }
        return null;
    }
    return telefunction;
    function getNotFoundErrMsg() {
        let errMsg = `Telefunction ${runContext.telefunctionName}() (${runContext.telefuncFilePath}) not found: `;
        if (!telefuncFile) {
            let extraMsg = null;
            const serverConfig = (0, serverConfig_1.getServerConfig)();
            if (serverConfig.telefuncFiles) {
                (0, utils_1.assert)(serverConfig.telefuncFiles.length > 0);
                (0, utils_1.assert)(serverConfig.root);
                extraMsg = `Did you set ${picocolors_1.default.cyan('config.root')} to the *client-side* root (see https://telefunc.com/root)?`;
            }
            errMsg += [
                `the file ${runContext.telefuncFilePath} doesn't exist.`,
                // Hint about config.root
                extraMsg,
                'Found `.telefunc.js` files:',
            ]
                .filter(Boolean)
                .join(' ');
            (0, utils_1.assert)(!runContext.telefuncFilesAll.includes(runContext.telefuncFilePath));
            errMsg += [runContext.telefuncFilePath, ...runContext.telefuncFilesAll]
                .sort()
                .map((filePath) => `\n  ${filePath} ${runContext.telefuncFilesAll.includes(filePath) ? '[✅ Exists]' : "[❌ Doesn't exist]"}`)
                .join('');
        }
        else {
            (0, utils_1.assert)(!telefuncFile.fileExports[runContext.telefunctionName]);
            (0, utils_1.assert)(telefuncFile.filePath === runContext.telefuncFilePath);
            errMsg += `the file ${telefuncFile.filePath} doesn't export a telefunction named "${runContext.telefunctionName}". `;
            const telefuncFileExportNames = Object.keys(telefuncFile.fileExports);
            if (telefuncFileExportNames.length === 0) {
                errMsg += `(The file ${telefuncFile.filePath} doesn't export any telefunction.)`;
            }
            else {
                errMsg += 'Found telefunctions:';
                (0, utils_1.assert)(!telefuncFileExportNames.includes(runContext.telefunctionName));
                errMsg += [runContext.telefunctionName, ...telefuncFileExportNames]
                    .sort()
                    .map((exportName) => `\n  ${telefuncFile.filePath} ${telefuncFileExportNames.includes(exportName)
                    ? `exports telefunction ${exportName}() ✅`
                    : `doesn't have an export "${exportName}" ❌`}`)
                    .join('');
            }
        }
        return errMsg;
    }
}
function findTelefuncFile(runContext) {
    const found = Object.entries(runContext.telefuncFilesLoaded).filter(([telefuncFilePath]) => {
        (0, utils_1.assert)(runContext.telefuncFilesAll.includes(telefuncFilePath));
        return telefuncFilePath === runContext.telefuncFilePath;
    });
    if (found.length === 0) {
        (0, utils_1.assert)(!runContext.telefuncFilesAll.includes(runContext.telefuncFilePath));
        return null;
    }
    (0, utils_1.assert)(found.length === 1);
    const [filePath, fileExports] = found[0];
    const telefuncFileFound = { filePath, fileExports };
    return telefuncFileFound;
}
