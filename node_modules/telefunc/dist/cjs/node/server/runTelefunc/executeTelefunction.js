"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeTelefunction = executeTelefunction;
const Abort_1 = require("../Abort");
const getContext_1 = require("../getContext");
const utils_1 = require("../../utils");
async function executeTelefunction(runContext) {
    const { telefunction, telefunctionArgs } = runContext;
    (0, getContext_1.restoreContext)(runContext.providedContext);
    let telefunctionReturn;
    let telefunctionError;
    let telefunctionHasErrored = false;
    let telefunctionAborted = false;
    const onError = (err) => {
        (0, utils_1.assertUsage)(typeof err === 'object' && err !== null, `The telefunction ${runContext.telefunctionName}() (${runContext.telefuncFilePath}) threw a non-object error: \`${err}\`. Make sure the telefunction does \`throw new Error(${err})\` instead.`);
        (0, utils_1.assertUsage)(err !== Abort_1.Abort, `Missing parentheses \`()\` in \`throw Abort\` (it should be \`throw Abort()\`) at telefunction ${runContext.telefunctionName}() (${runContext.telefuncFilePath}).`);
        if ((0, Abort_1.isAbort)(err)) {
            telefunctionAborted = true;
            telefunctionReturn = err.abortValue;
        }
        else {
            telefunctionHasErrored = true;
            telefunctionError = err;
        }
    };
    let resultSync;
    try {
        resultSync = telefunction.apply(null, telefunctionArgs);
    }
    catch (err) {
        onError(err);
    }
    if (!telefunctionHasErrored && !telefunctionAborted) {
        (0, utils_1.assertUsage)((0, utils_1.isPromise)(resultSync), `The telefunction ${runContext.telefunctionName}() (${runContext.telefuncFilePath}) did not return a promise. A telefunction should always return a promise (e.g. define it as a \`async function\`).`);
        try {
            telefunctionReturn = await resultSync;
        }
        catch (err) {
            onError(err);
        }
    }
    return { telefunctionReturn, telefunctionAborted, telefunctionHasErrored, telefunctionError };
}
