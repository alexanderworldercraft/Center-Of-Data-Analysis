"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runTelefunc = runTelefunc;
const utils_1 = require("../utils");
const loadTelefuncFiles_1 = require("./runTelefunc/loadTelefuncFiles");
const parseHttpRequest_1 = require("./runTelefunc/parseHttpRequest");
// import { getEtag } from './runTelefunc/getEtag'
const executeTelefunction_1 = require("./runTelefunc/executeTelefunction");
const serializeTelefunctionResult_1 = require("./runTelefunc/serializeTelefunctionResult");
const handleError_1 = require("./runTelefunc/handleError");
const onBug_1 = require("./runTelefunc/onBug");
const applyShield_1 = require("./runTelefunc/applyShield");
const findTelefunction_1 = require("./runTelefunc/findTelefunction");
const serverConfig_1 = require("./serverConfig");
// HTTP Response for:
//  - `throw Abort()`
const abortedRequestStatusCode = 403; // "Forbidden"
// HTTP Response for:
// - User's telefunction threw an error that isn't `Abort()` (i.e. the telefunction has a bug).
// - The Telefunc code threw an error (i.e. Telefunc has a bug).
const serverError = {
    statusCode: 500, // "Internal Server Error"
    body: 'Internal Server Error',
    contentType: 'text/plain',
    etag: null,
};
// HTTP Response for:
// - Some non-telefunc client makes a malformed HTTP request.
// - The telefunction couldn't be found.
const invalidRequest = {
    statusCode: 400, // "Bad Request"
    body: 'Invalid Telefunc Request',
    contentType: 'text/plain',
    etag: null,
};
async function runTelefunc(runContext) {
    try {
        return await runTelefunc_(runContext);
    }
    catch (err) {
        (0, onBug_1.callBugListeners)(err);
        (0, handleError_1.handleError)(err);
        return Object.assign({ err }, serverError);
    }
}
async function runTelefunc_(httpRequest) {
    const runContext = {};
    {
        // TODO: remove? Since `serverConfig` is global I don't think we need to set it to `runContext`, see for example https://github.com/brillout/telefunc/commit/5e3367d2d463b72e805e75ddfc68ef7f177a35c0
        const serverConfig = (0, serverConfig_1.getServerConfig)();
        (0, utils_1.objectAssign)(runContext, {
            httpRequest,
            serverConfig: {
                disableNamingConvention: serverConfig.disableNamingConvention,
                telefuncUrl: serverConfig.telefuncUrl,
            },
            appRootDir: serverConfig.root,
            telefuncFilesManuallyProvidedByUser: serverConfig.telefuncFiles,
        });
    }
    {
        const logInvalidRequests = !(0, utils_1.isProduction)(); /* || process.env.DEBUG.includes('telefunc') */
        (0, utils_1.objectAssign)(runContext, { logInvalidRequests });
    }
    (0, utils_1.objectAssign)(runContext, {
        providedContext: httpRequest.context || null,
    });
    {
        const parsed = (0, parseHttpRequest_1.parseHttpRequest)(runContext);
        if (parsed.isMalformed) {
            return invalidRequest;
        }
        const { telefunctionKey, telefunctionArgs, telefuncFilePath, telefunctionName } = parsed;
        (0, utils_1.objectAssign)(runContext, {
            telefunctionKey,
            telefunctionArgs,
            telefuncFilePath,
            telefunctionName,
        });
    }
    {
        const { telefuncFilesLoaded, telefuncFilesAll } = await (0, loadTelefuncFiles_1.loadTelefuncFiles)(runContext);
        (0, utils_1.assert)(telefuncFilesLoaded, 'No `.telefunc.js` file found');
        (0, utils_1.objectAssign)(runContext, { telefuncFilesLoaded, telefuncFilesAll });
    }
    {
        const telefunction = (0, findTelefunction_1.findTelefunction)(runContext);
        if (!telefunction) {
            return invalidRequest;
        }
        (0, utils_1.objectAssign)(runContext, { telefunction });
    }
    {
        const { isValidRequest } = (0, applyShield_1.applyShield)(runContext);
        (0, utils_1.objectAssign)(runContext, { isValidRequest });
        if (!isValidRequest) {
            (0, utils_1.objectAssign)(runContext, {
                telefunctionAborted: true,
                telefunctionReturn: undefined,
            });
            const httpResponseBody = (0, serializeTelefunctionResult_1.serializeTelefunctionResult)(runContext);
            return {
                statusCode: abortedRequestStatusCode,
                body: httpResponseBody,
                contentType: 'text/plain',
                etag: null,
            };
        }
    }
    {
        (0, utils_1.assert)(runContext.isValidRequest);
        const { telefunctionReturn, telefunctionAborted, telefunctionHasErrored, telefunctionError } = await (0, executeTelefunction_1.executeTelefunction)(runContext);
        (0, utils_1.objectAssign)(runContext, {
            telefunctionReturn,
            telefunctionHasErrored,
            telefunctionAborted,
            telefunctionError,
        });
    }
    if (runContext.telefunctionHasErrored) {
        throw runContext.telefunctionError;
    }
    {
        const httpResponseBody = (0, serializeTelefunctionResult_1.serializeTelefunctionResult)(runContext);
        (0, utils_1.objectAssign)(runContext, { httpResponseBody });
    }
    // {
    //   const httpResponseEtag = await getEtag(runContext)
    //   objectAssign(runContext, { httpResponseEtag })
    // }
    return {
        statusCode: runContext.telefunctionAborted ? abortedRequestStatusCode : 200,
        body: runContext.httpResponseBody,
        contentType: 'text/plain',
        // etag: runContext.httpResponseEtag,
        etag: null,
    };
}
