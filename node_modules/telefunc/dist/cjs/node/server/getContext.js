"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getContext = getContext;
exports.provideTelefuncContext = provideTelefuncContext;
exports.restoreContext = restoreContext;
exports.installAsyncMode = installAsyncMode;
exports.isAsyncMode = isAsyncMode;
const sync_1 = require("./getContext/sync");
const utils_1 = require("../utils");
const globalObject = (0, utils_1.getGlobalObject)('getContext.ts', {
    getContext: sync_1.getContext_sync,
    restoreContext: sync_1.restoreContext_sync,
    provideTelefuncContext: sync_1.provideTelefuncContext_sync,
    isAsyncMode: false,
});
function getContext() {
    const context = globalObject.getContext();
    (0, utils_1.assert)((0, utils_1.isObject)(context));
    return context;
}
function provideTelefuncContext(context) {
    /* TODO: check whether it's possible to deprecate Async Hooks for Nuxt.
    assertWarning(false, 'provideTelefuncContext() is deprecated', { onlyOnce: true })
    */
    (0, utils_1.assert)((0, utils_1.isObject)(context));
    globalObject.provideTelefuncContext(context);
}
function restoreContext(context) {
    (0, utils_1.assert)(context === null || (0, utils_1.isObject)(context));
    globalObject.restoreContext(context);
}
function installAsyncMode({ getContext_async, provideTelefuncContext_async, restoreContext_async, }) {
    globalObject.getContext = getContext_async;
    globalObject.restoreContext = restoreContext_async;
    globalObject.provideTelefuncContext = provideTelefuncContext_async;
    globalObject.isAsyncMode = true;
}
function isAsyncMode() {
    return globalObject.isAsyncMode;
}
